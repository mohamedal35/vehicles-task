{
  "version": 3,
  "sources": ["../../src/toggleswitch/style/ToggleSwitchStyle.js", "../../src/toggleswitch/BaseToggleSwitch.vue", "../../src/toggleswitch/ToggleSwitch.vue", "../../src/toggleswitch/ToggleSwitch.vue?vue&type=template&id=5f95dadd&lang.js"],
  "sourcesContent": ["import BaseStyle from '@primevue/core/base/style';\n\nconst theme = ({ dt }) => `\n.p-toggleswitch {\n    display: inline-block;\n    width: ${dt('toggleswitch.width')};\n    height: ${dt('toggleswitch.height')};\n}\n\n.p-toggleswitch-input {\n    cursor: pointer;\n    appearance: none;\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    padding: 0;\n    margin: 0;\n    opacity: 0;\n    z-index: 1;\n    outline: 0 none;\n    border-radius: ${dt('toggleswitch.border.radius')};\n}\n\n.p-toggleswitch-slider {\n    display: inline-block;\n    cursor: pointer;\n    width: 100%;\n    height: 100%;\n    border-width: ${dt('toggleswitch.border.width')};\n    border-style: solid;\n    border-color: ${dt('toggleswitch.border.color')};\n    background: ${dt('toggleswitch.background')};\n    transition: background ${dt('toggleswitch.transition.duration')}, color ${dt('toggleswitch.transition.duration')}, border-color ${dt('toggleswitch.transition.duration')}, outline-color ${dt('toggleswitch.transition.duration')}, box-shadow ${dt(\n    'toggleswitch.transition.duration'\n)};\n    border-radius: ${dt('toggleswitch.border.radius')};\n    outline-color: transparent;\n    box-shadow: ${dt('toggleswitch.shadow')};\n}\n\n.p-toggleswitch-slider:before {\n    position: absolute;\n    content: \"\";\n    top: 50%;\n    background: ${dt('toggleswitch.handle.background')};\n    width: ${dt('toggleswitch.handle.size')};\n    height: ${dt('toggleswitch.handle.size')};\n    left: ${dt('toggleswitch.gap')};\n    margin-top: calc(-1 * calc(${dt('toggleswitch.handle.size')} / 2));\n    border-radius: ${dt('toggleswitch.handle.border.radius')};\n    transition: background ${dt('toggleswitch.transition.duration')}, left ${dt('toggleswitch.slide.duration')};\n}\n\n.p-toggleswitch.p-toggleswitch-checked .p-toggleswitch-slider {\n    background: ${dt('toggleswitch.checked.background')};\n    border-color: ${dt('toggleswitch.checked.border.color')};\n}\n\n.p-toggleswitch.p-toggleswitch-checked .p-toggleswitch-slider:before {\n    background: ${dt('toggleswitch.handle.checked.background')};\n    left: calc(${dt('toggleswitch.width')} - calc(${dt('toggleswitch.handle.size')} + ${dt('toggleswitch.gap')}));\n}\n\n.p-toggleswitch:not(.p-disabled):has(.p-toggleswitch-input:hover) .p-toggleswitch-slider {\n    background: ${dt('toggleswitch.hover.background')};\n    border-color: ${dt('toggleswitch.hover.border.color')};\n}\n\n.p-toggleswitch:not(.p-disabled):has(.p-toggleswitch-input:hover) .p-toggleswitch-slider:before {\n    background: ${dt('toggleswitch.handle.hover.background')};\n}\n\n.p-toggleswitch:not(.p-disabled):has(.p-toggleswitch-input:hover).p-toggleswitch-checked .p-toggleswitch-slider {\n    background: ${dt('toggleswitch.checked.hover.background')};\n    border-color: ${dt('toggleswitch.checked.hover.border.color')};\n}\n\n.p-toggleswitch:not(.p-disabled):has(.p-toggleswitch-input:hover).p-toggleswitch-checked .p-toggleswitch-slider:before {\n    background: ${dt('toggleswitch.handle.checked.hover.background')};\n}\n\n.p-toggleswitch:not(.p-disabled):has(.p-toggleswitch-input:focus-visible) .p-toggleswitch-slider {\n    box-shadow: ${dt('toggleswitch.focus.ring.shadow')};\n    outline: ${dt('toggleswitch.focus.ring.width')} ${dt('toggleswitch.focus.ring.style')} ${dt('toggleswitch.focus.ring.color')};\n    outline-offset: ${dt('toggleswitch.focus.ring.offset')};\n}\n\n.p-toggleswitch.p-invalid > .p-toggleswitch-slider {\n    border-color: ${dt('toggleswitch.invalid.border.color')};\n}\n\n.p-toggleswitch.p-disabled {\n    opacity: 1;\n}\n\n.p-toggleswitch.p-disabled .p-toggleswitch-slider {\n    background: ${dt('toggleswitch.disabled.background')};\n}\n\n.p-toggleswitch.p-disabled .p-toggleswitch-slider:before {\n    background: ${dt('toggleswitch.handle.disabled.background')};\n}\n`;\n\nconst inlineStyles = {\n    root: { position: 'relative' }\n};\n\nconst classes = {\n    root: ({ instance, props }) => [\n        'p-toggleswitch p-component',\n        {\n            'p-toggleswitch-checked': instance.checked,\n            'p-disabled': props.disabled,\n            'p-invalid': props.invalid\n        }\n    ],\n    input: 'p-toggleswitch-input',\n    slider: 'p-toggleswitch-slider'\n};\n\nexport default BaseStyle.extend({\n    name: 'toggleswitch',\n    theme,\n    classes,\n    inlineStyles\n});\n", "<script>\nimport BaseComponent from '@primevue/core/basecomponent';\nimport ToggleSwitchStyle from 'primevue/toggleswitch/style';\n\nexport default {\n    name: 'BaseToggleSwitch',\n    extends: BaseComponent,\n    props: {\n        modelValue: {\n            type: null,\n            default: false\n        },\n        trueValue: {\n            type: null,\n            default: true\n        },\n        falseValue: {\n            type: null,\n            default: false\n        },\n        invalid: {\n            type: Boolean,\n            default: false\n        },\n        disabled: {\n            type: Boolean,\n            default: false\n        },\n        readonly: {\n            type: Boolean,\n            default: false\n        },\n        tabindex: {\n            type: Number,\n            default: null\n        },\n        inputId: {\n            type: String,\n            default: null\n        },\n        inputClass: {\n            type: [String, Object],\n            default: null\n        },\n        inputStyle: {\n            type: Object,\n            default: null\n        },\n        ariaLabelledby: {\n            type: String,\n            default: null\n        },\n        ariaLabel: {\n            type: String,\n            default: null\n        }\n    },\n    style: ToggleSwitchStyle,\n    provide() {\n        return {\n            $pcToggleSwitch: this,\n            $parentInstance: this\n        };\n    }\n};\n</script>\n", "<template>\n    <div :class=\"cx('root')\" :style=\"sx('root')\" v-bind=\"getPTOptions('root')\" :data-p-checked=\"checked\" :data-p-disabled=\"disabled\">\n        <input\n            :id=\"inputId\"\n            type=\"checkbox\"\n            role=\"switch\"\n            :class=\"[cx('input'), inputClass]\"\n            :style=\"inputStyle\"\n            :checked=\"checked\"\n            :tabindex=\"tabindex\"\n            :disabled=\"disabled\"\n            :readonly=\"readonly\"\n            :aria-checked=\"checked\"\n            :aria-labelledby=\"ariaLabelledby\"\n            :aria-label=\"ariaLabel\"\n            :aria-invalid=\"invalid || undefined\"\n            @focus=\"onFocus\"\n            @blur=\"onBlur\"\n            @change=\"onChange\"\n            v-bind=\"getPTOptions('input')\"\n        />\n        <span :class=\"cx('slider')\" v-bind=\"getPTOptions('slider')\"></span>\n    </div>\n</template>\n\n<script>\nimport BaseToggleSwitch from './BaseToggleSwitch.vue';\n\nexport default {\n    name: 'ToggleSwitch',\n    extends: BaseToggleSwitch,\n    inheritAttrs: false,\n    emits: ['update:modelValue', 'change', 'focus', 'blur'],\n    methods: {\n        getPTOptions(key) {\n            const _ptm = key === 'root' ? this.ptmi : this.ptm;\n\n            return _ptm(key, {\n                context: {\n                    checked: this.checked,\n                    disabled: this.disabled\n                }\n            });\n        },\n        onChange(event) {\n            if (!this.disabled && !this.readonly) {\n                const newValue = this.checked ? this.falseValue : this.trueValue;\n\n                this.$emit('update:modelValue', newValue);\n                this.$emit('change', event);\n            }\n        },\n        onFocus(event) {\n            this.$emit('focus', event);\n        },\n        onBlur(event) {\n            this.$emit('blur', event);\n        }\n    },\n    computed: {\n        checked() {\n            return this.modelValue === this.trueValue;\n        }\n    }\n};\n</script>\n", "<template>\n    <div :class=\"cx('root')\" :style=\"sx('root')\" v-bind=\"getPTOptions('root')\" :data-p-checked=\"checked\" :data-p-disabled=\"disabled\">\n        <input\n            :id=\"inputId\"\n            type=\"checkbox\"\n            role=\"switch\"\n            :class=\"[cx('input'), inputClass]\"\n            :style=\"inputStyle\"\n            :checked=\"checked\"\n            :tabindex=\"tabindex\"\n            :disabled=\"disabled\"\n            :readonly=\"readonly\"\n            :aria-checked=\"checked\"\n            :aria-labelledby=\"ariaLabelledby\"\n            :aria-label=\"ariaLabel\"\n            :aria-invalid=\"invalid || undefined\"\n            @focus=\"onFocus\"\n            @blur=\"onBlur\"\n            @change=\"onChange\"\n            v-bind=\"getPTOptions('input')\"\n        />\n        <span :class=\"cx('slider')\" v-bind=\"getPTOptions('slider')\"></span>\n    </div>\n</template>\n\n<script>\nimport BaseToggleSwitch from './BaseToggleSwitch.vue';\n\nexport default {\n    name: 'ToggleSwitch',\n    extends: BaseToggleSwitch,\n    inheritAttrs: false,\n    emits: ['update:modelValue', 'change', 'focus', 'blur'],\n    methods: {\n        getPTOptions(key) {\n            const _ptm = key === 'root' ? this.ptmi : this.ptm;\n\n            return _ptm(key, {\n                context: {\n                    checked: this.checked,\n                    disabled: this.disabled\n                }\n            });\n        },\n        onChange(event) {\n            if (!this.disabled && !this.readonly) {\n                const newValue = this.checked ? this.falseValue : this.trueValue;\n\n                this.$emit('update:modelValue', newValue);\n                this.$emit('change', event);\n            }\n        },\n        onFocus(event) {\n            this.$emit('focus', event);\n        },\n        onBlur(event) {\n            this.$emit('blur', event);\n        }\n    },\n    computed: {\n        checked() {\n            return this.modelValue === this.trueValue;\n        }\n    }\n};\n</script>\n"],
  "mappings": "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",
  "names": ["theme", "_ref", "dt", "concat", "inlineStyles", "root", "position", "classes", "_ref2", "instance", "props", "checked", "disabled", "invalid", "input", "slider", "BaseStyle", "extend", "name", "name", "BaseComponent", "props", "modelValue", "type", "trueValue", "falseValue", "invalid", "Boolean", "disabled", "readonly", "tabindex", "Number", "inputId", "String", "inputClass", "Object", "inputStyle", "ariaLabelledby", "ariaLabel", "style", "ToggleSwitchStyle", "provide", "$pcToggleSwitch", "$parentInstance", "script", "BaseToggleSwitch", "inheritAttrs", "emits", "methods", "getPTOptions", "key", "_ptm", "ptmi", "ptm", "context", "checked", "onChange", "event", "newValue", "$emit", "onFocus", "onBlur", "computed", "_openBlock", "_createElementBlock", "_mergeProps", "_ctx", "cx", "sx", "$options", "_createElementVNode", "id", "role", "undefined", "apply", "arguments", "_hoisted_2"]
}
